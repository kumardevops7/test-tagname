name: build-deploy

on:
  workflow_call:
    inputs:
      BRANCH:
        description: "branch name"
        type: string
        required: true

      ENVIRONMENT:
        description: "Environment name"
        type: string
        required: true     

permissions:
  contents: write
     
 
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: build
        run: |
          mvn clean install
      

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.BRANCH == 'main'  && github.event_name != 'pull_request' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: release to github packages
        run: |
          # mvn clean deploy -s ci_settings.xml
          # git config --global user.email "you@example.com"
          git config user.name $GIT_USERNAME
          mvn release:clean release:prepare release:perform -s ci_settings.xml
        env:
            GITHUB_TOKEN: ${{ secrets.PAT }}
            GIT_USERNAME: ${{ github.actor }}
            GIT_PASSWORD: ${{ secrets.PAT }}
          
          
  deploy:
    needs: [release]
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    if: ${{ inputs.BRANCH == 'main'  && github.event_name != 'pull_request' }} 
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: deploy to ${{ inputs.ENVIRONMENT }}
        run: |
          project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "project Version = '$project_version'"
          IFS='-'
          read -ra arr <<< "$project_version"
          art_version=${arr[0]}
          echo "version=$art_version"
          mvn clean dependency:copy -s ci_settings.xml -Ddemo.version=$art_version
          cd target
          ls -ltr 
          cd ..
          warFile="demo-$art_version.war"
          echo "war file:$warFile"
          mvn tomcat7:deploy -s ci_settings.xml -DwarFile="./target/$warFile"
          echo "Deployment to '${{ inputs.ENVIRONMENT  }}' successful"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}
          
      - name: notification
        run: |
          echo "notification is done. Status: ${{ job.status }}"